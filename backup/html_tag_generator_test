# require "pry"
# require "rubygems"
# require "bundler/setup"
# require "active_support/all"
module HtmlComponent
  class HtmlTagGenerator
    FORM_COMPONENT = "HtmlComponent"
    COMPONENT_LIST = [
      :text,
      :combo_box,
      :customize,
      :tag,
      :link,
      :script
    ]

    def initialize(options = {})
      @options = options
      @commands = []
      yield(self)
    end

    COMPONENT_LIST.each do |component|
      define_method :"#{component}" do |attributes|
        attributes = {attributes: attributes}
        @commands << attributes.merge(type: component)
      end
    end

    def customize(attributes)
      yield
    end

    # def text(attributes)
    #   attributes = {attributes: attributes}
    #   @commands << attributes.merge(type: :text)
    # end

    def render
      generate_tag do |f|
        @commands.map do |c|
          generate_class(c[:type]).new(c[:attributes]).perform
        end.join
      end
    end

    def tag_name
      raise "need to implement this"
    end

    private

    def generate_tag
      form_attributes = @options.map do |k, v|
        " #{k}='#{v}'"
      end.join

      form_tag = "<#{tag_name} #{form_attributes}>"
      form_tag += yield
      form_tag += "</#{tag_name}>"
    end

    def generate_class(type)
      get_form_name(type).constantize
    end

    def get_form_name(type)
      "#{FORM_COMPONENT}::#{type.to_s.camelize}"
    end
  end

  class FormGenerator < HtmlTagGenerator
    def tag_name
      "form"
    end
  end

  class DivGenerator < HtmlTagGenerator
    def tag_name
      "div"
    end
  end

  class HeaderGenerator < HtmlTagGenerator
    def tag_name
      "head"
    end
  end

  class ComponentTag
    def initialize(attributes)
      @attributes = attributes
    end

    def tag_name
      raise "need to implement this"
    end

    def perform
      tag = "<#{tag_name}"

      tag += @attributes.map do |k, v|
        " #{k}='#{v}'"
      end.join

      tag + closing_tag
    end

    def closing_tag
      "/>"
    end
  end

  class Link < ComponentTag
    def tag_name
      "link"
    end
  end

  class Script < ComponentTag
    def tag_name
      "script"
    end

    def closing_tag
      "</script>"
    end
  end

  class Text < ComponentTag
    def tag_name
      "input"
    end

    def closing_tag
      ">"
    end
  end

  # class Text
  #   def initialize(attributes)
  #     @attributes = attributes
  #   end
  #
  #   def perform
  #     tag = "<input"
  #
  #     tag += @attributes.map do |k, v|
  #       " #{k}='#{v}'"
  #     end.join
  #
  #     tag + ">"
  #   end
  # end

  # class Customize
  #   def initialize(content)
  #     @content = content
  #   end
  #
  #   def perform
  #     @content
  #   end
  # end

  class ComboBox
    def initialize(attributes)
      @attributes = attributes
    end

    def perform
      tag = "<select"
      @attributes[:select].each do |k, v|
        tag += " #{k}='#{v}'"
      end
      tag += ">"

      standarized_options = option_canonicalizer(@attributes[:option])

      string_options = standarized_options.map do |k|
        "<option value='#{k[0]}'>#{k[1]}</option>"
      end.join

      tag + string_options + "</select>"
    end

    private

    def option_canonicalizer(raw_options)
      raw_options.map do |option|
        if option.is_a? String
          # to convert string to array form
          [option, option]
        else
          option
        end
      end
    end
  end

  class Tag
    def initialize(values)
      @tag = values[:tag]
      @attributes = values[:attributes]
      @content = values[:content]
    end

    def perform
      attribute = ""
      if @attributes.present?
        attribute = @attributes.map do |k, v|
          " #{k}='#{v}'"
        end.join
      end

      result = "<#{@tag}#{attribute}>"
      result += "#{@content}"
      result + "</#{@tag}>"
    end
  end
end

# header_content = HtmlComponent::HeaderGenerator.new do |h|
#   h.link(rel: "stylesheet", href: "diff_table.scss", type: "text/css")
#   h.link(rel: "stylesheet", href: "input.scss", type: "text/css")
#   h.link(rel: "stylesheet", href: "select.scss", type: "text/css")
#   h.script(src: "jquery.min.js", type: "text/javascript")
#   h.script(src: "dbdiff.js", type: "text/javascript")
# end.render
#
# body_content = HtmlComponent::FormGenerator.new(action: "/db_compare", method: "post") do |f|
#   f.customize(
#     HtmlComponent::DivGenerator.new(class: "table-title") do |d|
#       d.tag(tag: "h3", content: "Database Type:")
#       d.combo_box(select: {id: "db_type"}, option: [["pg", "postgres"], "mysql"])
#       d.tag(tag: "h3", content: "Database Name:")
#       # pg select tag
#       # mysql select tag
#       d.tag(tag: "h3", content: "Action Name:")
#       d.text(type: "text", id: "action_name", name: "action_name")
#       d.text(type: "hidden", id: "parameters", name: "parameters")
#       d.text(type: "submit", id: "compare", class: "myButton", value: "compare")
#     end.render
#   )
# end.render
#
# puts header_content + body_content

# <form  action='/db_compare' method='post'>
#   <div  class='table-title'>
#     <h3>Database Type:</h3>
#     <select id='db_type'>
#       <option value='pg'>postgres</option>
#       <option value='mysql'>mysql</option>
#     </select>
#     <h3>Database Name:</h3>
#     <h3>Action Name:</h3>
#     <input type='text' id='action_name' name='action_name'>
#     <input type='hidden' id='parameters' name='parameters'>
#     <input type='submit' id='compare' class='myButton' value='compare'>
#   </div>
# </form>



# test = HtmlComponent::FormGenerator.new(action: '/db_compare') do |f|
#   f.customize("<div>")
#   f.text(id: "so", class: "aaa-aaa fff jj")
#   f.text(id: "action_name", name: "action_name")
#   f.tag(tag: "h3", content: "Database Name:")
#   f.tag(tag: "h3", attributes: {class: "kls"}, content: "Database Name:")
#   f.text(id: "action_name2", name: "action_name2")
#   f.combo_box(select: {id: "db_type"}, option: [['t', 'transgender'], 'female', 'male' ])
#   f.customize("</div>")
# end.render
#
# puts test

# Result:
# <div>
#   <input id='so' class='aaa-aaa fff jj'>
#   <input id='action_name' name='action_name'>
#   <h3>Database Name:</h3>
#   <h3 class='kls'>Database Name:</h3>
#   <input id='action_name2' name='action_name2'>
#   <select id='db_type'>
#     <option value='t'>transgender</option>
#     <option value='female'>female</option>
#     <option value='male'>male</option>
#   </select>
# </div>
